import discord
import logging
from discord import app_commands
from discord.ext import commands
from typing import Optional
from utils.db import get_db
from utils.permissions import is_admin
from utils.constants import ACHIEVEMENT_DESCRIPTIONS

logger = logging.getLogger(__name__)

class Achievements(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.init_achievements()
        
    def init_achievements(self):
        """Initialize the achievements in the database if they don't exist."""
        db = get_db()
        cursor = db.cursor()
        
        try:
            # Check if achievements table is empty
            cursor.execute("SELECT COUNT(*) FROM achievements")
            count = cursor.fetchone()[0]
            
            if count == 0:
                # Add default achievements
                achievements = [
                    (1, "–ö–æ—Ä–æ–ª—å —Ä–µ–≤–∏–∫–æ–≤", "–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞–º–∏"),
                    (2, "–°–Ω–∞–π–ø–µ—Ä-–ª–µ–≥–µ–Ω–¥–∞", "–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä"),
                    (3, "–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∑–≤–µ—Ä—å", "–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–¥—Ä—è–¥")
                ]
                
                cursor.executemany(
                    "INSERT INTO achievements (id, name, description) VALUES (?, ?, ?)",
                    achievements
                )
                
                db.commit()
                logger.info("Initialized default achievements")
        except Exception as e:
            logger.error(f"Error initializing achievements: {e}")
            db.rollback()
    
    @app_commands.command(
        name="achievement-add",
        description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"
    )
    @app_commands.describe(
        name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        description="–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    )
    async def achievement_add(self, interaction: discord.Interaction, name: str, description: str):
        # Check admin permissions
        if not await is_admin(interaction):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!", ephemeral=True)
            return
            
        # Validate inputs
        if len(name) < 3 or len(name) > 50:
            await interaction.response.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.", ephemeral=True)
            return
            
        if len(description) < 5 or len(description) > 200:
            await interaction.response.send_message("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.", ephemeral=True)
            return
            
        # Get database connection
        db = get_db()
        cursor = db.cursor()
        
        try:
            # Check if achievement with same name already exists
            cursor.execute("SELECT COUNT(*) FROM achievements WHERE name = ?", (name,))
            if cursor.fetchone()[0] > 0:
                await interaction.response.send_message("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", ephemeral=True)
                return
                
            # Add achievement
            cursor.execute(
                "INSERT INTO achievements (name, description) VALUES (?, ?)",
                (name, description)
            )
            
            db.commit()
            
            await interaction.response.send_message(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{name}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Error adding achievement: {e}")
            db.rollback()
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.", ephemeral=True)
    
    @app_commands.command(
        name="achievement-grant",
        description="–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"
    )
    @app_commands.describe(
        user="–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        achievement_id="ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    )
    async def achievement_grant(self, interaction: discord.Interaction, user: discord.Member, achievement_id: int):
        # Check admin permissions
        if not await is_admin(interaction):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!", ephemeral=True)
            return
            
        # Get database connection
        db = get_db()
        cursor = db.cursor()
        
        try:
            # Check if achievement exists
            cursor.execute("SELECT * FROM achievements WHERE id = ?", (achievement_id,))
            achievement = cursor.fetchone()
            
            if not achievement:
                await interaction.response.send_message(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å ID {achievement_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                return
                
            # Check if player already has this achievement
            cursor.execute(
                "SELECT COUNT(*) FROM player_achievements WHERE user_id = ? AND achievement_id = ?",
                (user.id, achievement_id)
            )
            
            if cursor.fetchone()[0] > 0:
                await interaction.response.send_message(f"–ò–≥—Ä–æ–∫ —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!", ephemeral=True)
                return
                
            # Ensure player exists in players table
            cursor.execute(
                "INSERT OR IGNORE INTO players (user_id, username) VALUES (?, ?)",
                (user.id, user.name)
            )
                
            # Grant achievement
            cursor.execute(
                "INSERT INTO player_achievements (user_id, achievement_id, earned_date) VALUES (?, ?, datetime('now'))",
                (user.id, achievement_id)
            )
            
            db.commit()
            
            # Notify player
            try:
                embed = discord.Embed(
                    title="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!",
                    description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{achievement['name']}**!",
                    color=0xF1C40F  # Gold
                )
                embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=achievement['description'])
                
                await user.send(embed=embed)
            except:
                logger.warning(f"Could not send DM to user {user.id} about achievement")
            
            await interaction.response.send_message(
                f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{achievement['name']}** —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ –∏–≥—Ä–æ–∫—É {user.mention}!",
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error granting achievement: {e}")
            db.rollback()
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.", ephemeral=True)
    
    @app_commands.command(
        name="achievement-list",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    )
    async def achievement_list(self, interaction: discord.Interaction):
        # Get database connection
        db = get_db()
        cursor = db.cursor()
        
        try:
            # Get all achievements
            cursor.execute("SELECT * FROM achievements ORDER BY id ASC")
            achievements = cursor.fetchall()
            
            if not achievements:
                await interaction.response.send_message("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", ephemeral=True)
                return
                
            # Create embed
            embed = discord.Embed(
                title="üèÜ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                description="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                color=0xF1C40F  # Gold
            )
            
            # Format achievements list
            achievements_text = ""
            for ach in achievements:
                achievements_text += f"**{ach['id']}: {ach['name']}** - {ach['description']}\n"
            
            embed.add_field(name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", value=achievements_text, inline=False)
            
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            logger.error(f"Error listing achievements: {e}")
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(Achievements(bot))
